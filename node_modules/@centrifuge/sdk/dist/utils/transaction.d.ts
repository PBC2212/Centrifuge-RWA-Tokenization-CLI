import { LocalAccount, type PublicClient } from 'viem';
import type { HexString } from '../types/index.js';
import type { MessageTypeWithSubType, OperationStatus, Signer, TransactionContext } from '../types/transaction.js';
export type BatchTransactionData = {
    contract: HexString;
    data: HexString[];
    value?: bigint;
    messages?: Record<number, MessageTypeWithSubType[]>;
};
export declare function wrapTransaction(title: string, ctx: TransactionContext, { contract, data: data_, value: value_, messages, }: {
    contract: HexString;
    data: HexString | HexString[];
    value?: bigint;
    messages?: Record<number, MessageTypeWithSubType[]>;
}): AsyncGenerator<OperationStatus | BatchTransactionData>;
export declare function doTransaction(title: string, publicClient: PublicClient, transactionCallback: () => Promise<HexString>): AsyncGenerator<OperationStatus>;
export declare function doSignMessage<T = any>(title: string, transactionCallback: () => Promise<T>): AsyncGenerator<OperationStatus, T>;
export declare function isLocalAccount(signer: Signer): signer is LocalAccount;
//# sourceMappingURL=transaction.d.ts.map