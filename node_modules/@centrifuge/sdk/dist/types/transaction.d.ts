import { type Account, type Chain, type LocalAccount, type PublicClient, type TransactionReceipt, type WalletClient } from 'viem';
import type { Centrifuge } from '../Centrifuge.js';
import type { HexString } from './index.js';
import type { Query } from './query.js';
export type OperationStatusType = 'SwitchingChain' | 'SigningTransaction' | 'SigningMessage' | 'SignedMessage' | 'TransactionPending' | 'TransactionConfirmed';
export type OperationSigningStatus = {
    id: string;
    type: 'SigningTransaction';
    title: string;
};
export type OperationSigningMessageStatus = {
    id: string;
    type: 'SigningMessage';
    title: string;
};
export type OperationSignedMessageStatus = {
    id: string;
    type: 'SignedMessage';
    title: string;
    signed: any;
};
export type OperationPendingStatus = {
    id: string;
    type: 'TransactionPending';
    title: string;
    hash: HexString;
};
export type OperationConfirmedStatus = {
    id: string;
    type: 'TransactionConfirmed';
    title: string;
    hash: HexString;
    receipt: TransactionReceipt;
};
export type OperationSwitchChainStatus = {
    type: 'SwitchingChain';
    chainId: number;
};
export type OperationStatus = OperationSigningStatus | OperationSigningMessageStatus | OperationSignedMessageStatus | OperationPendingStatus | OperationConfirmedStatus | OperationSwitchChainStatus;
export type EIP1193ProviderLike = {
    request(...args: any): Promise<any>;
};
export type Signer = EIP1193ProviderLike | LocalAccount;
export type Transaction = Query<OperationStatus> & {
    chainId: number;
};
export type TransactionContext = {
    isBatching?: boolean;
    signingAddress: HexString;
    chain: Chain;
    chainId: number;
    publicClient: PublicClient;
    walletClient: WalletClient<any, Chain, Account>;
    signer: Signer;
    root: Centrifuge;
};
export declare enum MessageType {
    _Invalid = 0,
    ScheduleUpgrade = 1,
    CancelUpgrade = 2,
    RecoverTokens = 3,
    RegisterAsset = 4,
    _Placeholder5 = 5,
    _Placeholder6 = 6,
    _Placeholder7 = 7,
    _Placeholder8 = 8,
    _Placeholder9 = 9,
    _Placeholder10 = 10,
    _Placeholder11 = 11,
    _Placeholder12 = 12,
    _Placeholder13 = 13,
    _Placeholder14 = 14,
    _Placeholder15 = 15,
    NotifyPool = 16,
    NotifyShareClass = 17,
    NotifyPricePoolPerShare = 18,
    NotifyPricePoolPerAsset = 19,
    NotifyShareMetadata = 20,
    UpdateShareHook = 21,
    InitiateTransferShares = 22,
    ExecuteTransferShares = 23,
    UpdateRestriction = 24,
    UpdateContract = 25,
    UpdateVault = 26,
    UpdateBalanceSheetManager = 27,
    UpdateHoldingAmount = 28,
    UpdateShares = 29,
    MaxAssetPriceAge = 30,
    MaxSharePriceAge = 31,
    Request = 32,
    RequestCallback = 33,
    SetRequestManager = 34
}
export declare enum VaultUpdateKind {
    DeployAndLink = 0,
    Link = 1,
    Unlink = 2
}
export type MessageTypeWithSubType = MessageType | {
    type: MessageType;
    subtype: VaultUpdateKind;
};
export declare function emptyMessage(type: MessageType, subtype?: VaultUpdateKind): HexString;
//# sourceMappingURL=transaction.d.ts.map