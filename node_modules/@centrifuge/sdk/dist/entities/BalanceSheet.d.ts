import type { HexString } from '../types/index.js';
import { Balance } from '../utils/BigInt.js';
import { AssetId } from '../utils/types.js';
import { Entity } from './Entity.js';
import type { Pool } from './Pool.js';
import { PoolNetwork } from './PoolNetwork.js';
import { ShareClass } from './ShareClass.js';
/**
 * Query and interact with the balanceSheet, which is the main entry point for withdrawing and depositing funds.
 * A BalanceSheet exists for every ShareClass on any network that Vaults are deployed on.
 */
export declare class BalanceSheet extends Entity {
    network: PoolNetwork;
    shareClass: ShareClass;
    pool: Pool;
    chainId: number;
    balances(): import("../index.js").Query<{
        assetId: AssetId;
        amount: Balance;
        value: Balance;
        price: import("../utils/BigInt.js").Price;
        asset: {
            decimals: number;
            address: `0x${string}`;
            tokenId: bigint;
            name: string;
            symbol: string;
            chainId: number;
        };
        holding: {
            valuation: `0x${string}`;
            amount: Balance;
            value: Balance;
            isLiability: boolean;
            accounts: {
                0: number | null;
                1: number | null;
                2: number | null;
                3: number | null;
                4: number | null;
                5: number | null;
            };
        } | null | undefined;
    }[]>;
    deposit(assetId: AssetId, amount: Balance): import("../index.js").Transaction;
    withdraw(assetId: AssetId, to: HexString, amount: Balance): import("../index.js").Transaction;
}
//# sourceMappingURL=BalanceSheet.d.ts.map