import type { HexString } from '../types/index.js';
import { MerkleProofAction, MerkleProofPolicy } from '../types/poolMetadata.js';
import { Balance, Price } from '../utils/BigInt.js';
import { Entity } from './Entity.js';
import type { Pool } from './Pool.js';
import { PoolNetwork } from './PoolNetwork.js';
/**
 * Query and interact with a Merkle Proof Manager.
 */
export declare class MerkleProofManager extends Entity {
    network: PoolNetwork;
    pool: Pool;
    chainId: number;
    /**
     * The contract address of the Merkle Proof Manager.
     */
    address: HexString;
    getPolicyRoot(): Promise<void>;
    setPolicies(strategist: HexString, policies: MerkleProofPolicy[], actions?: MerkleProofAction[]): import("../types/transaction.js").Transaction;
    /**
     * Disable strategist.
     * @param strategist - The strategist address to disable
     */
    disableStrategist(strategist: HexString): import("../types/transaction.js").Transaction;
    execute(calls: {
        policy: MerkleProofPolicy;
        values: (string | number | bigint | Balance | Price)[];
    }[]): import("../types/transaction.js").Transaction;
}
//# sourceMappingURL=MerkleProofManager.d.ts.map