import { context } from '../tests/setup.js';
import { AssetId, PoolId, ShareClassId } from '../utils/types.js';
import { MerkleProofManager } from './MerkleProofManager.js';
import { Pool } from './Pool.js';
import { PoolNetwork } from './PoolNetwork.js';
const chainId = 11155111;
const centId = 1;
// Pool with async vault, permissioned redeem
const poolId = PoolId.from(centId, 1);
const scId = ShareClassId.from(poolId, 1);
const assetId = AssetId.from(centId, 1);
const fundManager = '0x423420Ae467df6e90291fd0252c0A8a637C1e03f';
const mpmAddress = '0x9E14250c4C53bdcA1437F7EDa25B0D9ca46CfFE2';
describe('MerkleProofManager', () => {
    let merkleProofManager;
    before(async () => {
        const { centrifuge } = context;
        const pool = new Pool(centrifuge, poolId.raw, chainId);
        const poolNetwork = new PoolNetwork(centrifuge, pool, chainId);
        merkleProofManager = new MerkleProofManager(centrifuge, poolNetwork, mpmAddress);
    });
    it('works', async () => {
        const expectedRootHash = '0x282444929cdaf1a1b1b4f69f682f30978c826397dd82c8e876db37c3a69fe4e5';
        await merkleProofManager.getPolicyRoot();
    });
});
//# sourceMappingURL=MerkleProofManager.test.js.map