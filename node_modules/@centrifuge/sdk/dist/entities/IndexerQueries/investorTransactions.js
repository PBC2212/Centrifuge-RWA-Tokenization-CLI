import { Balance, Price } from '../../utils/BigInt.js';
export const investorTransactionsPostProcess = (data) => {
    return data.investorTransactions.nodes.map((tx) => {
        const currencyDecimals = tx.pool.currency.decimals;
        return {
            id: tx.id,
            poolId: tx.poolId,
            timestamp: new Date(tx.timestamp),
            accountId: tx.accountId,
            chainId: tx.account.chainId === '0' ? 'centrifuge' : Number(tx.account.chainId),
            evmAddress: tx.account.evmAddress,
            trancheId: tx.trancheId.split('-')[1] ?? '',
            epochNumber: tx.epochNumber,
            type: tx.type,
            currencyAmount: new Balance(tx?.currencyAmount || 0n, currencyDecimals),
            tokenAmount: new Balance(tx?.tokenAmount || 0n, currencyDecimals),
            tokenPrice: new Price(tx?.tokenPrice ?? 0n),
            transactionFee: new Balance(tx?.transactionFee ?? 0n, currencyDecimals),
            hash: tx.hash,
        };
    });
};
export const investorTransactionsQuery = `
query($filter: InvestorTransactionFilter) {
    investorTransactions(
        orderBy: TIMESTAMP_ASC,
        filter: $filter
    ) {
        nodes {
            id
            timestamp
            accountId
            account {
                chainId
                evmAddress
            }
            pool {
                currency {
                    decimals
                }
            }
            hash
            poolId
            trancheId
            epochNumber
            type
            tokenAmount
            currencyAmount
            tokenPrice
            transactionFee
        }
    }
}
`;
//# sourceMappingURL=investorTransactions.js.map