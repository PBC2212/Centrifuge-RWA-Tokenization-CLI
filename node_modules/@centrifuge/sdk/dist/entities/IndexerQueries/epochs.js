import { Balance, Price } from '../../utils/BigInt.js';
export const epochsPostProcess = (data) => {
    return data.epoches.nodes.map((order) => {
        const index = order.epochStates.nodes.length > 1 ? order.epochStates.nodes.length - 1 : 0;
        const epochStates = order.epochStates.nodes[index];
        const currencyDecimals = order.pool.currency.decimals;
        return {
            epochId: order.id,
            closedAt: order.closedAt,
            paidFees: new Balance(order.sumPoolFeesPaidAmount, currencyDecimals),
            tokenPrice: new Price(epochStates?.tokenPrice ?? '0'),
            sumOutstandingInvestOrders: new Balance(epochStates?.sumOutstandingInvestOrders ?? '0', currencyDecimals),
            sumFulfilledInvestOrders: new Balance(epochStates?.sumFulfilledInvestOrders ?? '0', currencyDecimals),
            sumOutstandingRedeemOrders: new Balance(epochStates?.sumOutstandingRedeemOrders ?? '0', currencyDecimals),
            sumFulfilledRedeemOrders: new Balance(epochStates?.sumFulfilledRedeemOrders ?? '0', currencyDecimals),
            netAssetValue: new Balance(order.poolSnapshots.nodes[index]?.netAssetValue ?? '0', currencyDecimals),
        };
    });
};
export const epochsQuery = `
query($filter: EpochFilter) {
  epoches(filter: $filter) {
    nodes {
      poolId
      id
      sumPoolFeesPaidAmount
      closedAt
      epochStates {
        nodes {
          tokenPrice
          sumOutstandingInvestOrders
          sumFulfilledInvestOrders
          sumOutstandingRedeemOrders
          sumFulfilledRedeemOrders
        }
      }
      pool {
        currency {
          decimals
        }
      }
      poolSnapshots {
        nodes {
          netAssetValue
        }
      }
    }
  }
}
`;
//# sourceMappingURL=epochs.js.map