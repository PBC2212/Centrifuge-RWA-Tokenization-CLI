import { Balance, Perquintill, Price } from '../../utils/BigInt.js';
export const trancheSnapshotsQuery = `
query($filter: TrancheSnapshotFilter) {
  trancheSnapshots(
    orderBy: BLOCK_NUMBER_ASC,
    filter: $filter
) {
    nodes {
      tranche {
        poolId
        trancheId
        pool {
          currency {
            decimals
            symbol
          }
        }
      }
      timestamp
      tokenSupply
      tokenPrice
      sumOutstandingInvestOrdersByPeriod
      sumOutstandingRedeemOrdersByPeriod
      sumFulfilledInvestOrdersByPeriod
      sumFulfilledRedeemOrdersByPeriod
      yield7DaysAnnualized
      yield30DaysAnnualized
      yield90DaysAnnualized
      yieldSinceInception
      yieldMTD
      yieldQTD
      yieldYTD
      yieldSinceLastPeriod
    }
  }
}
`;
export function trancheSnapshotsPostProcess(data) {
    const tranchesByDate = {};
    data?.trancheSnapshots?.nodes?.forEach((tranche) => {
        const date = tranche.timestamp.slice(0, 10);
        if (!tranchesByDate[date]) {
            tranchesByDate[date] = [];
        }
        const poolCurrency = tranche.tranche.pool.currency;
        const trancheSnapshot = {
            id: tranche.trancheId,
            timestamp: tranche.timestamp,
            poolId: tranche.tranche.poolId,
            trancheId: tranche.tranche.trancheId,
            pool: {
                currency: {
                    decimals: poolCurrency.decimals,
                    symbol: poolCurrency.symbol,
                },
            },
            price: new Price(tranche.tokenPrice ?? 0),
            tokenSupply: new Balance(tranche.tokenSupply, poolCurrency.decimals),
            fulfilledInvestOrders: new Balance(tranche.sumFulfilledInvestOrdersByPeriod, poolCurrency.decimals),
            fulfilledRedeemOrders: new Balance(tranche.sumFulfilledRedeemOrdersByPeriod, poolCurrency.decimals),
            outstandingInvestOrders: new Balance(tranche.sumOutstandingInvestOrdersByPeriod, poolCurrency.decimals),
            outstandingRedeemOrders: new Balance(tranche.sumOutstandingRedeemOrdersByPeriod, poolCurrency.decimals),
            yield7DaysAnnualized: new Perquintill(tranche.yield7DaysAnnualized ?? 0),
            yield30DaysAnnualized: new Perquintill(tranche.yield30DaysAnnualized ?? 0),
            yield90DaysAnnualized: new Perquintill(tranche.yield90DaysAnnualized ?? 0),
            yieldSinceInception: new Perquintill(tranche.yieldSinceInception ?? 0),
            yieldMTD: new Perquintill(tranche.yieldMTD ?? 0),
            yieldQTD: new Perquintill(tranche.yieldQTD ?? 0),
            yieldYTD: new Perquintill(tranche.yieldYTD ?? 0),
            yieldSinceLastPeriod: new Perquintill(tranche.yieldSinceLastPeriod ?? 0),
        };
        tranchesByDate[date].push(trancheSnapshot);
    });
    return tranchesByDate;
}
//# sourceMappingURL=trancheSnapshots.js.map