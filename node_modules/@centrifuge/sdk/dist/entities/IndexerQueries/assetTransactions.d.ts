import { Balance, Price } from '../../utils/BigInt.js';
export type AssetTransactionFilter = Partial<Record<keyof SubqueryAssetTransactions['assetTransactions']['nodes'][0], any>>;
export type AssetTransaction = {
    id: string;
    timestamp: Date;
    poolId: string;
    accountId: string;
    epochId: string;
    type: AssetTransactionType;
    amount: Balance;
    settlementPrice: Price | null;
    quantity: string | null;
    principalAmount: Balance | null;
    interestAmount: Balance | null;
    hash: string;
    realizedProfitFifo: Balance | undefined;
    unrealizedProfitAtMarketPrice: Balance | undefined;
    asset: {
        id: string;
        metadata: string;
        type: AssetType;
        currentPrice: string | null;
        name: string;
    };
    fromAsset?: {
        id: string;
        metadata: string;
        type: AssetType;
        name: string;
    };
    toAsset?: {
        id: string;
        metadata: string;
        type: AssetType;
        name: string;
    };
};
export declare enum AssetType {
    OnchainCash = "OnchainCash",
    OffchainCash = "OffchainCash",
    Other = "Other"
}
export type AssetTransactionType = 'CREATED' | 'PRICED' | 'BORROWED' | 'REPAID' | 'CLOSED' | 'CASH_TRANSFER' | 'DEPOSIT_FROM_INVESTMENTS' | 'WITHDRAWAL_FOR_REDEMPTIONS' | 'WITHDRAWAL_FOR_FEES' | 'INCREASE_DEBT' | 'DECREASE_DEBT';
type SubqueryAssetTransactions = {
    assetTransactions: {
        nodes: {
            __typename?: 'AssetTransaction';
            id: string;
            timestamp: string;
            poolId: string;
            accountId: string;
            hash: string;
            epochId: string;
            type: AssetTransactionType;
            amount: string | undefined;
            principalAmount: string | undefined;
            interestAmount: string | undefined;
            settlementPrice: string | null;
            quantity: string | null;
            realizedProfitFifo: string | undefined;
            pool: {
                currency: {
                    decimals: number;
                };
            };
            asset: {
                id: string;
                metadata: string;
                name: string;
                type: AssetType;
                sumRealizedProfitFifo: string;
                unrealizedProfitAtMarketPrice: string;
                currentPrice: string;
            };
            fromAsset?: {
                id: string;
                metadata: string;
                name: string;
                type: AssetType;
            };
            toAsset?: {
                id: string;
                metadata: string;
                name: string;
                type: AssetType;
            };
        }[];
    };
};
export declare const assetTransactionsPostProcess: (data: SubqueryAssetTransactions) => AssetTransaction[];
export declare const assetTransactionsQuery = "\nquery($filter: AssetTransactionFilter) {\n  assetTransactions(\n    orderBy: TIMESTAMP_ASC,\n    filter: $filter\n  ) {\n    nodes {\n      principalAmount\n      interestAmount\n      epochId\n      type\n      timestamp\n      amount\n      settlementPrice\n      quantity\n      hash\n      realizedProfitFifo\n      pool {\n        currency {\n          decimals\n        }\n      }\n      asset {\n        id\n        metadata\n        name\n        type\n        sumRealizedProfitFifo\n        unrealizedProfitAtMarketPrice\n      }\n      fromAsset {\n        id\n        metadata\n        name\n        type\n      }\n      toAsset {\n        id\n        metadata\n        name\n        type\n      }\n    }\n  }\n}\n";
export {};
//# sourceMappingURL=assetTransactions.d.ts.map