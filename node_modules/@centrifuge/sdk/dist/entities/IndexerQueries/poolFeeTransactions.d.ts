import { Balance } from '../../utils/BigInt.js';
export type PoolFeeTransactionFilter = Partial<Record<keyof SubqueryPoolFeeTransaction['poolFeeTransactions']['nodes'][0], any>>;
export type PoolFeeTransaction = {
    feeId: string;
    type: SubqueryPoolFeeTransactionType;
    timestamp: string;
    blockNumber: string;
    epochNumber: number;
    amount: Balance | null;
};
export type SubqueryPoolFeeTransactionType = 'PROPOSED' | 'ADDED' | 'REMOVED' | 'CHARGED' | 'UNCHARGED' | 'ACCRUED' | 'PAID';
export type SubqueryPoolFeeTransaction = {
    poolFeeTransactions: {
        nodes: {
            id: string;
            type: SubqueryPoolFeeTransactionType;
            timestamp: string;
            blockNumber: string;
            epochNumber: number;
            amount: string | null;
            poolFee: {
                feeId: string;
                pool: {
                    currency: {
                        decimals: number;
                    };
                };
            };
        }[];
    };
};
export declare function poolFeeTransactionPostProcess(data: SubqueryPoolFeeTransaction): PoolFeeTransaction[];
export declare const poolFeeTransactionQuery = "\nquery($filter: PoolFeeTransactionFilter) {\n  poolFeeTransactions(\n    orderBy: TIMESTAMP_ASC,\n    filter: $filter\n    ) {\n    nodes {\n      id\n      type\n      timestamp\n      blockNumber\n      epochNumber\n      amount\n      poolFee {\n        feeId\n        pool {\n          currency {\n            decimals\n          }\n        }\n      }\n    }\n  }\n}\n";
//# sourceMappingURL=poolFeeTransactions.d.ts.map