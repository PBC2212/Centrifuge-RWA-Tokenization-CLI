import { Balance } from '../../utils/BigInt.js';
export type PoolSnapshotFilter = Partial<Record<keyof SubqueryPoolSnapshot['poolSnapshots']['nodes'][0], any>>;
export type PoolSnapshot = {
    id: string;
    poolId: string;
    timestamp: string;
    netAssetValue: Balance;
    totalReserve: Balance;
    offchainCashValue: Balance;
    portfolioValuation: Balance;
    sumPoolFeesChargedAmountByPeriod: Balance;
    sumPoolFeesAccruedAmountByPeriod: Balance;
    sumPoolFeesPaidAmountByPeriod: Balance;
    sumBorrowedAmountByPeriod: Balance;
    sumPrincipalRepaidAmountByPeriod: Balance;
    sumInterestRepaidAmountByPeriod: Balance;
    sumUnscheduledRepaidAmountByPeriod: Balance;
    sumRepaidAmountByPeriod: Balance;
    sumInvestedAmountByPeriod: Balance;
    sumRedeemedAmountByPeriod: Balance;
    sumPoolFeesPendingAmount: Balance;
    sumDebtWrittenOffByPeriod: Balance;
    sumInterestAccruedByPeriod: Balance;
    sumRealizedProfitFifoByPeriod: Balance;
    sumUnrealizedProfitAtMarketPrice: Balance;
    sumUnrealizedProfitAtNotional: Balance;
    sumUnrealizedProfitByPeriod: Balance;
    poolValue: Balance;
    poolCurrency: {
        decimals: number;
    };
    tranches: string[];
};
export type SubqueryPoolSnapshot = {
    poolSnapshots: {
        nodes: {
            poolId: string;
            id: string;
            timestamp: string;
            value: string;
            netAssetValue: number;
            totalReserve: number;
            offchainCashValue: number;
            portfolioValuation: number;
            sumPoolFeesChargedAmountByPeriod: string;
            sumPoolFeesAccruedAmountByPeriod: string;
            sumPoolFeesPaidAmountByPeriod: string;
            sumBorrowedAmountByPeriod: string;
            sumPrincipalRepaidAmountByPeriod: string;
            sumInterestRepaidAmountByPeriod: string;
            sumUnscheduledRepaidAmountByPeriod: string;
            sumRepaidAmountByPeriod: string;
            sumInvestedAmountByPeriod: string;
            sumRedeemedAmountByPeriod: string;
            blockNumber: number;
            sumPoolFeesPendingAmount: string;
            sumDebtWrittenOffByPeriod: string;
            sumInterestAccruedByPeriod: string;
            sumRealizedProfitFifoByPeriod: string;
            sumUnrealizedProfitAtMarketPrice: string;
            sumUnrealizedProfitAtNotional: string;
            sumUnrealizedProfitByPeriod: string;
            pool: {
                id: string;
                currency: {
                    decimals: number;
                };
                tranches: {
                    nodes: {
                        id: string;
                    }[];
                };
            };
        }[];
    };
};
export declare const poolSnapshotsQuery = "\nquery($filter: PoolSnapshotFilter) {\n  poolSnapshots(\n    orderBy: BLOCK_NUMBER_ASC\n    filter: $filter \n  ) {\n    nodes {\n      id\n      timestamp\n      netAssetValue\n      totalReserve\n      offchainCashValue\n      portfolioValuation\n      blockNumber\n      sumPoolFeesChargedAmountByPeriod\n      sumPoolFeesAccruedAmountByPeriod\n      sumPoolFeesPaidAmountByPeriod\n      sumPoolFeesPendingAmount\n      sumBorrowedAmountByPeriod\n      sumRepaidAmountByPeriod\n      sumInvestedAmountByPeriod\n      sumRedeemedAmountByPeriod\n      sumPrincipalRepaidAmountByPeriod\n      sumInterestRepaidAmountByPeriod\n      sumUnscheduledRepaidAmountByPeriod\n      sumInterestAccruedByPeriod\n      sumDebtWrittenOffByPeriod\n      sumRealizedProfitFifoByPeriod\n      sumUnrealizedProfitAtMarketPrice\n      sumUnrealizedProfitAtNotional\n      sumUnrealizedProfitByPeriod\n      pool {\n        id\n        currency {\n          decimals\n        }\n        tranches {\n          nodes {\n            id\n          }\n        }\n      }\n    }\n  }\n}";
export declare function poolSnapshotsPostProcess(data: SubqueryPoolSnapshot): PoolSnapshot[];
//# sourceMappingURL=poolSnapshots.d.ts.map