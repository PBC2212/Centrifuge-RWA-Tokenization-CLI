import { Balance, Price } from '../../utils/BigInt.js';
export type EpochFilter = Partial<Record<keyof SubqueryEpochs['epoches']['nodes'][0], any>>;
export type Epoch = {
    epochId: string;
    closedAt: string;
    paidFees: Balance;
    tokenPrice: Price;
    sumOutstandingInvestOrders: Balance;
    sumFulfilledInvestOrders: Balance;
    sumOutstandingRedeemOrders: Balance;
    sumFulfilledRedeemOrders: Balance;
    netAssetValue: Balance;
};
type SubqueryEpochs = {
    epoches: {
        nodes: {
            id: string;
            sumPoolFeesPaidAmount: string;
            closedAt: string;
            epochStates: {
                nodes: {
                    tokenPrice: string;
                    sumOutstandingInvestOrders: string;
                    sumFulfilledInvestOrders: string;
                    sumOutstandingRedeemOrders: string;
                    sumFulfilledRedeemOrders: string;
                }[];
            };
            pool: {
                currency: {
                    decimals: number;
                };
            };
            poolSnapshots: {
                nodes: {
                    netAssetValue: string;
                }[];
            };
        }[];
    };
};
export declare const epochsPostProcess: (data: SubqueryEpochs) => Epoch[];
export declare const epochsQuery = "\nquery($filter: EpochFilter) {\n  epoches(filter: $filter) {\n    nodes {\n      poolId\n      id\n      sumPoolFeesPaidAmount\n      closedAt\n      epochStates {\n        nodes {\n          tokenPrice\n          sumOutstandingInvestOrders\n          sumFulfilledInvestOrders\n          sumOutstandingRedeemOrders\n          sumFulfilledRedeemOrders\n        }\n      }\n      pool {\n        currency {\n          decimals\n        }\n      }\n      poolSnapshots {\n        nodes {\n          netAssetValue\n        }\n      }\n    }\n  }\n}\n";
export {};
//# sourceMappingURL=epochs.d.ts.map