import { Balance } from '../../utils/BigInt.js';
export function trancheCurrencyBalancePostProcessor(data) {
    const currencyBalancesByAccountId = {};
    data.currencyBalances.nodes.forEach((balance) => {
        const trancheId = balance.currency.trancheId?.split('-')[1] ?? '';
        currencyBalancesByAccountId[`${balance.accountId}-${trancheId}`] = balance;
    });
    return data.trancheBalances.nodes.map((balance) => {
        const currencyDecimals = balance.pool.currency.decimals;
        return {
            accountId: balance.accountId,
            chainId: balance.account?.chainId !== '0' ? Number(balance.account?.chainId) : 'centrifuge',
            trancheId: balance.trancheId.split('-')[1] ?? '',
            evmAddress: balance.account?.evmAddress,
            balance: new Balance(currencyBalancesByAccountId[`${balance.accountId}-${balance.trancheId.split('-')[1]}`]?.amount ?? 0, currencyDecimals),
            pendingInvestCurrency: new Balance(balance.pendingInvestCurrency, currencyDecimals),
            claimableTrancheTokens: new Balance(balance.claimableTrancheTokens, currencyDecimals),
            sumClaimedTrancheTokens: new Balance(balance.sumClaimedTrancheTokens, currencyDecimals),
            pendingRedeemTrancheTokens: new Balance(balance.pendingRedeemTrancheTokens, currencyDecimals),
            claimableCurrency: new Balance(balance.claimableCurrency, currencyDecimals),
            sumClaimedCurrency: new Balance(balance.sumClaimedCurrency, currencyDecimals),
        };
    });
}
export const trancheCurrencyBalanceQuery = `
query($filterTranches: TrancheBalanceFilter, $filterCurrencies: CurrencyBalanceFilter) {
  trancheBalances(filter: $filterTranches) {
    nodes {
      accountId
      trancheId
      account {
        chainId
        evmAddress
      }
      pool {
        currency {
          decimals
        }
      }
      pendingInvestCurrency
      claimableTrancheTokens
      sumClaimedTrancheTokens
      pendingRedeemTrancheTokens
      claimableCurrency
      sumClaimedCurrency
    }
  }
  currencyBalances(filter: $filterCurrencies) {
    nodes {
      accountId
      account {
        chainId
        evmAddress
      }
      currency {
        trancheId
      }
      amount
    }
  }
}
`;
//# sourceMappingURL=trancheCurrencyBalance.js.map