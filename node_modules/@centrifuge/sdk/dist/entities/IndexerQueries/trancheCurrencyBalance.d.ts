import { Balance } from '../../utils/BigInt.js';
export type TrancheCurrencyBalanceFilter = Partial<Record<keyof SubqueryTrancheBalances['trancheBalances']['nodes'][0], any>> | Partial<Record<keyof SubqueryCurrencyBalances['currencyBalances']['nodes'][0], any>>;
export type TrancheBalanceFilter = Partial<Record<keyof SubqueryTrancheBalances['trancheBalances']['nodes'][0], any>>;
export type CurrencyBalanceFilter = Partial<Record<keyof SubqueryCurrencyBalances['currencyBalances']['nodes'][0], any>>;
export declare function trancheCurrencyBalancePostProcessor(data: SubqueryTrancheBalances & SubqueryCurrencyBalances): {
    accountId: string;
    chainId: number | "centrifuge";
    trancheId: string;
    evmAddress: string | undefined;
    balance: Balance;
    pendingInvestCurrency: Balance;
    claimableTrancheTokens: Balance;
    sumClaimedTrancheTokens: Balance;
    pendingRedeemTrancheTokens: Balance;
    claimableCurrency: Balance;
    sumClaimedCurrency: Balance;
}[];
export type TrancheCurrencyBalance = {
    accountId: string;
    chainId: number | 'centrifuge';
    trancheId: string;
    evmAddress?: string;
    balance: Balance;
    pendingInvestCurrency: Balance;
    claimableTrancheTokens: Balance;
    sumClaimedTrancheTokens: Balance;
    pendingRedeemTrancheTokens: Balance;
    claimableCurrency: Balance;
    sumClaimedCurrency: Balance;
};
export type SubqueryTrancheBalances = {
    trancheBalances: {
        nodes: {
            __typename?: 'TrancheBalances';
            id: string;
            timestamp: string;
            accountId: string;
            account: {
                chainId: string;
                evmAddress?: string;
            };
            pool: {
                currency: {
                    decimals: number;
                };
            };
            poolId: string;
            trancheId: string;
            pendingInvestCurrency: string;
            claimableTrancheTokens: string;
            sumClaimedTrancheTokens: string;
            pendingRedeemTrancheTokens: string;
            claimableCurrency: string;
            sumClaimedCurrency: string;
        }[];
    };
};
export type SubqueryCurrencyBalances = {
    currencyBalances: {
        nodes: {
            __typename?: 'CurrencyBalances';
            id: string;
            accountId: string;
            currency: {
                trancheId: string | null;
            };
            account: {
                chainId: string;
                evmAddress?: string;
            };
            amount: string;
        }[];
    };
};
export declare const trancheCurrencyBalanceQuery = "\nquery($filterTranches: TrancheBalanceFilter, $filterCurrencies: CurrencyBalanceFilter) {\n  trancheBalances(filter: $filterTranches) {\n    nodes {\n      accountId\n      trancheId\n      account {\n        chainId\n        evmAddress\n      }\n      pool {\n        currency {\n          decimals\n        }\n      }\n      pendingInvestCurrency\n      claimableTrancheTokens\n      sumClaimedTrancheTokens\n      pendingRedeemTrancheTokens\n      claimableCurrency\n      sumClaimedCurrency\n    }\n  }\n  currencyBalances(filter: $filterCurrencies) {\n    nodes {\n      accountId\n      account {\n        chainId\n        evmAddress\n      }\n      currency {\n        trancheId\n      }\n      amount\n    }\n  }\n}\n";
//# sourceMappingURL=trancheCurrencyBalance.d.ts.map