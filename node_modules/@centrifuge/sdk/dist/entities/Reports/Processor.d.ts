import { AssetListData, AssetListReport, AssetListReportFilter, AssetTimeSeriesData, AssetTimeSeriesReport, AssetTimeSeriesReportFilter, AssetTransactionReport, AssetTransactionReportFilter, AssetTransactionsData, BalanceSheetData, BalanceSheetReport, CashflowData, CashflowReport, FeeTransactionReport, FeeTransactionReportFilter, FeeTransactionsData, InvestorListData, InvestorListReport, InvestorListReportFilter, InvestorTransactionsData, InvestorTransactionsReport, InvestorTransactionsReportFilter, OrdersListData, OrdersListReport, ProfitAndLossData, ProfitAndLossReport, ReportFilter, TokenPriceData, TokenPriceReport, TokenPriceReportFilter } from '../../types/reports.js';
export declare class Processor {
    /**
     * Process raw data into a balance sheet report
     * @param data Pool and tranche snapshot data
     * @param filter Optional filtering and grouping options
     * @returns Processed balance sheet report at the end of each period
     */
    balanceSheet(data: BalanceSheetData, filter?: Omit<ReportFilter, 'to' | 'from'>): BalanceSheetReport[];
    /**
     * Process raw data into an aggregated cashflow report, fees and endCashBalance are NOT aggregated by period
     * @param data Pool snapshot data
     * @param filter Optional filtering and grouping options
     * @returns Processed cashflow report at the end of each period
     */
    cashflow(data: CashflowData, filter?: Omit<ReportFilter, 'to' | 'from'>): CashflowReport[];
    /**
     * Process raw data into an aggregated profit and loss report, fees and endCashBalance are NOT aggregated by period
     * @param data Pool snapshot data
     * @param filter Optional filtering and grouping options
     * @returns Processed profit and loss report at the end of each period
     */
    profitAndLoss(data: ProfitAndLossData, filter?: Omit<ReportFilter, 'to' | 'from'>): ProfitAndLossReport[];
    investorTransactions(data: InvestorTransactionsData, filter?: Omit<InvestorTransactionsReportFilter, 'to' | 'from'>): InvestorTransactionsReport[];
    assetTransactions(data: AssetTransactionsData, filter?: Omit<AssetTransactionReportFilter, 'to' | 'from'>): AssetTransactionReport[];
    feeTransactions(data: FeeTransactionsData, filter?: Omit<FeeTransactionReportFilter, 'to' | 'from'>): FeeTransactionReport[];
    tokenPrice(data: TokenPriceData, filter?: Omit<TokenPriceReportFilter, 'to' | 'from'>): TokenPriceReport[];
    assetList(data: AssetListData, filter?: Omit<AssetListReportFilter, 'to' | 'from'>): AssetListReport[];
    investorList(data: InvestorListData, filter?: Omit<InvestorListReportFilter, 'to' | 'from'>): InvestorListReport[];
    ordersList(data: OrdersListData): OrdersListReport[];
    assetTimeSeries(data: AssetTimeSeriesData, filter?: Omit<AssetTimeSeriesReportFilter, 'to' | 'from'>): AssetTimeSeriesReport[];
    /**
     * Apply grouping to a report.
     * @param items Report items
     * @param filter Optional filtering and grouping options
     * @param strategy Grouping strategy, sum aggregates data by period, latest returns the latest item in the period
     * @returns Grouped report
     *
     * Note: if strategy is 'sum', only Decimal values that are not nested are aggregated, all
     * other values are overwritten with the last value in the period
     */
    private applyGrouping;
    private getDateKey;
}
export declare const processor: Processor;
//# sourceMappingURL=Processor.d.ts.map